-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Grammatica.

module Grammatica.Abs where

import Prelude (Char, Double, Integer, String, Int)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Posn = Pn !Int !Int !Int
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Boolean = Boolean_true | Boolean_false
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RExpr
    = Or Posn RExpr RExpr
    | And Posn RExpr RExpr
    | Not Posn RExpr
    | Eq Posn RExpr RExpr
    | Neq Posn RExpr RExpr
    | Lt Posn RExpr RExpr
    | LtE Posn RExpr RExpr
    | Gt Posn RExpr RExpr
    | GtE Posn RExpr RExpr
    | Add Posn RExpr RExpr
    | Sub Posn RExpr RExpr
    | Mul Posn RExpr RExpr
    | Div Posn RExpr RExpr
    | Mod Posn RExpr RExpr
    | Pow Posn RExpr RExpr
    | Neg Posn RExpr
    | Ref Posn LExpr
    | FCall Posn FunCall
    | Int Posn Integer
    | Char Posn Char
    | String Posn String
    | Float Posn Double
    | Bool Posn Boolean
    | GoArrayLit Posn Integer BasicType [RExpr]
    | Lexpr Posn LExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunCall = Call Posn Ident [RExpr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LExpr
    = Deref Posn RExpr
    | PreInc Posn LExpr
    | PreDecr Posn LExpr
    | PostInc Posn LExpr
    | PostDecr Posn LExpr
    | BasLExpr Posn BLExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BLExpr = ArrayEl Posn Ident RExpr | Id Posn Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Program = Prog Posn [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = Dfun Posn Ident [Parameter] CompStmt | DvarGo VarSpec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Parameter = Param Posn Ident TypeSpec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarSpec
    = VarSpecSingleInit Posn Ident TypeSpec RExpr
    | VarSpecArrayInit Posn Ident RExpr
    | VarSpecSingleNoInit Posn Ident TypeSpec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSpec = BasTyp Posn BasicType | CompType Posn CompoundType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BasicType
    = BasicType_bool Posn
    | BasicType_char Posn
    | BasicType_float Posn
    | BasicType_int Posn
    | BasicType_string Posn
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CompoundType
    = ArrDef Posn Integer TypeSpec | ArrUnDef Posn TypeSpec | Pointer Posn TypeSpec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CompStmt = BlockDecl Posn [BlockItem]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BlockItem = DeclItem Posn Decl | StmtItem Posn Stmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = Comp Posn CompStmt
    | ProcCall Posn FunCall
    | Jmp Posn JumpStmt
    | Iter Posn IterStmt
    | Sel Posn SelectionStmt
    | Assgn Posn LExpr Assignment_op RExpr
    | LExprStmt Posn LExpr
    | DeclStmt Posn VarSpec
    | StmtInc Posn Ident
    | StmtDec Posn Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Assignment_op
    = Assign Posn
    | AssgnMul Posn
    | AssgnAdd Posn
    | AssgnDiv Posn
    | AssgnSub Posn
    | AssgnPow Posn
    | AssgnAnd Posn
    | AssgnOr Posn
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data JumpStmt = Break | Continue
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SelectionStmt = IfNoElse Posn RExpr Stmt | IfElse Posn RExpr Stmt Stmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IterStmt = While Posn RExpr Stmt | DoWhile Posn Stmt RExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

