-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammatica.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammatica.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Grammatica.Abs.Ident -> Result
transIdent x = case x of
  Grammatica.Abs.Ident string -> failure x

transBoolean :: Grammatica.Abs.Boolean -> Result
transBoolean x = case x of
  Grammatica.Abs.Boolean_true -> failure x
  Grammatica.Abs.Boolean_false -> failure x

transRExpr :: Grammatica.Abs.RExpr -> Result
transRExpr x = case x of
  Grammatica.Abs.Or rexpr1 rexpr2 -> failure x
  Grammatica.Abs.And rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Not rexpr -> failure x
  Grammatica.Abs.Eq rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Neq rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Lt rexpr1 rexpr2 -> failure x
  Grammatica.Abs.LtE rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Gt rexpr1 rexpr2 -> failure x
  Grammatica.Abs.GtE rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Add rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Sub rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Mul rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Div rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Mod rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Pow rexpr1 rexpr2 -> failure x
  Grammatica.Abs.Neg rexpr -> failure x
  Grammatica.Abs.Ref lexpr -> failure x
  Grammatica.Abs.FCall funcall -> failure x
  Grammatica.Abs.Int integer -> failure x
  Grammatica.Abs.Char char -> failure x
  Grammatica.Abs.String string -> failure x
  Grammatica.Abs.Float double -> failure x
  Grammatica.Abs.Bool boolean -> failure x
  Grammatica.Abs.GoArrayLit integer basictype rexprs -> failure x
  Grammatica.Abs.Lexpr lexpr -> failure x

transFunCall :: Grammatica.Abs.FunCall -> Result
transFunCall x = case x of
  Grammatica.Abs.Call ident rexprs -> failure x

transLExpr :: Grammatica.Abs.LExpr -> Result
transLExpr x = case x of
  Grammatica.Abs.Deref rexpr -> failure x
  Grammatica.Abs.PreInc lexpr -> failure x
  Grammatica.Abs.PreDecr lexpr -> failure x
  Grammatica.Abs.PostInc lexpr -> failure x
  Grammatica.Abs.PostDecr lexpr -> failure x
  Grammatica.Abs.BasLExpr blexpr -> failure x

transBLExpr :: Grammatica.Abs.BLExpr -> Result
transBLExpr x = case x of
  Grammatica.Abs.ArrayEl ident rexpr -> failure x
  Grammatica.Abs.Id ident -> failure x

transProgram :: Grammatica.Abs.Program -> Result
transProgram x = case x of
  Grammatica.Abs.Prog decls -> failure x

transDecl :: Grammatica.Abs.Decl -> Result
transDecl x = case x of
  Grammatica.Abs.Dfun ident parameters compstmt -> failure x
  Grammatica.Abs.DvarGo varspec -> failure x

transParameter :: Grammatica.Abs.Parameter -> Result
transParameter x = case x of
  Grammatica.Abs.Param ident typespec -> failure x

transVarSpec :: Grammatica.Abs.VarSpec -> Result
transVarSpec x = case x of
  Grammatica.Abs.VarSpecMultiInit myidentlist typespec myrexprlist -> failure x
  Grammatica.Abs.VarSpecSingleInit ident typespec rexpr -> failure x
  Grammatica.Abs.VarSpecArrayInit ident rexpr -> failure x
  Grammatica.Abs.VarSpecMultiNoInit myidentlist typespec -> failure x
  Grammatica.Abs.VarSpecSingleNoInit ident typespec -> failure x

transMyIdentList :: Grammatica.Abs.MyIdentList -> Result
transMyIdentList x = case x of
  Grammatica.Abs.MyIdentList ident1 ident2 -> failure x
  Grammatica.Abs.MyIdentListExt myidentlist ident -> failure x

transMyRExprList :: Grammatica.Abs.MyRExprList -> Result
transMyRExprList x = case x of
  Grammatica.Abs.MyRExprList rexpr1 rexpr2 -> failure x
  Grammatica.Abs.MyRExprListExt myrexprlist rexpr -> failure x

transTypeSpec :: Grammatica.Abs.TypeSpec -> Result
transTypeSpec x = case x of
  Grammatica.Abs.BasTyp basictype -> failure x
  Grammatica.Abs.CompType compoundtype -> failure x

transBasicType :: Grammatica.Abs.BasicType -> Result
transBasicType x = case x of
  Grammatica.Abs.BasicType_bool -> failure x
  Grammatica.Abs.BasicType_char -> failure x
  Grammatica.Abs.BasicType_float -> failure x
  Grammatica.Abs.BasicType_int -> failure x
  Grammatica.Abs.BasicType_string -> failure x

transCompoundType :: Grammatica.Abs.CompoundType -> Result
transCompoundType x = case x of
  Grammatica.Abs.ArrDef integer typespec -> failure x
  Grammatica.Abs.ArrUnDef typespec -> failure x
  Grammatica.Abs.Pointer typespec -> failure x

transCompStmt :: Grammatica.Abs.CompStmt -> Result
transCompStmt x = case x of
  Grammatica.Abs.BlockDecl blockitems -> failure x

transBlockItem :: Grammatica.Abs.BlockItem -> Result
transBlockItem x = case x of
  Grammatica.Abs.DeclItem decl -> failure x
  Grammatica.Abs.StmtItem stmt -> failure x

transStmt :: Grammatica.Abs.Stmt -> Result
transStmt x = case x of
  Grammatica.Abs.Comp compstmt -> failure x
  Grammatica.Abs.ProcCall funcall -> failure x
  Grammatica.Abs.Jmp jumpstmt -> failure x
  Grammatica.Abs.Iter iterstmt -> failure x
  Grammatica.Abs.Sel selectionstmt -> failure x
  Grammatica.Abs.Assgn lexpr assignmentop rexpr -> failure x
  Grammatica.Abs.LExprStmt lexpr -> failure x
  Grammatica.Abs.DeclStmt varspec -> failure x
  Grammatica.Abs.StmtInc ident -> failure x
  Grammatica.Abs.StmtDec ident -> failure x

transAssignment_op :: Grammatica.Abs.Assignment_op -> Result
transAssignment_op x = case x of
  Grammatica.Abs.Assign -> failure x
  Grammatica.Abs.AssgnMul -> failure x
  Grammatica.Abs.AssgnAdd -> failure x
  Grammatica.Abs.AssgnDiv -> failure x
  Grammatica.Abs.AssgnSub -> failure x
  Grammatica.Abs.AssgnPow -> failure x
  Grammatica.Abs.AssgnAnd -> failure x
  Grammatica.Abs.AssgnOr -> failure x

transJumpStmt :: Grammatica.Abs.JumpStmt -> Result
transJumpStmt x = case x of
  Grammatica.Abs.Break -> failure x
  Grammatica.Abs.Continue -> failure x

transSelectionStmt :: Grammatica.Abs.SelectionStmt -> Result
transSelectionStmt x = case x of
  Grammatica.Abs.IfNoElse rexpr stmt -> failure x
  Grammatica.Abs.IfElse rexpr stmt1 stmt2 -> failure x

transIterStmt :: Grammatica.Abs.IterStmt -> Result
transIterStmt x = case x of
  Grammatica.Abs.While rexpr stmt -> failure x
  Grammatica.Abs.DoWhile stmt rexpr -> failure x
