-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintGrammatica.

module PrintGrammatica where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified AbsGrammatica

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGrammatica.Ident where
  prt _ (AbsGrammatica.Ident i) = doc $ showString i
instance Print AbsGrammatica.Boolean where
  prt i = \case
    AbsGrammatica.Boolean_true -> prPrec i 0 (concatD [doc (showString "true")])
    AbsGrammatica.Boolean_false -> prPrec i 0 (concatD [doc (showString "false")])

instance Print AbsGrammatica.RExpr where
  prt i = \case
    AbsGrammatica.Or rexpr1 rexpr2 -> prPrec i 0 (concatD [prt 0 rexpr1, doc (showString "||"), prt 1 rexpr2])
    AbsGrammatica.And rexpr1 rexpr2 -> prPrec i 1 (concatD [prt 1 rexpr1, doc (showString "&&"), prt 2 rexpr2])
    AbsGrammatica.Not rexpr -> prPrec i 2 (concatD [doc (showString "!"), prt 3 rexpr])
    AbsGrammatica.Eq rexpr1 rexpr2 -> prPrec i 3 (concatD [prt 4 rexpr1, doc (showString "=="), prt 4 rexpr2])
    AbsGrammatica.Neq rexpr1 rexpr2 -> prPrec i 3 (concatD [prt 4 rexpr1, doc (showString "!="), prt 4 rexpr2])
    AbsGrammatica.Lt rexpr1 rexpr2 -> prPrec i 3 (concatD [prt 4 rexpr1, doc (showString "<"), prt 4 rexpr2])
    AbsGrammatica.LtE rexpr1 rexpr2 -> prPrec i 3 (concatD [prt 4 rexpr1, doc (showString "<="), prt 4 rexpr2])
    AbsGrammatica.Gt rexpr1 rexpr2 -> prPrec i 3 (concatD [prt 4 rexpr1, doc (showString ">"), prt 4 rexpr2])
    AbsGrammatica.GtE rexpr1 rexpr2 -> prPrec i 3 (concatD [prt 4 rexpr1, doc (showString ">="), prt 4 rexpr2])
    AbsGrammatica.Add rexpr1 rexpr2 -> prPrec i 4 (concatD [prt 4 rexpr1, doc (showString "+"), prt 5 rexpr2])
    AbsGrammatica.Sub rexpr1 rexpr2 -> prPrec i 4 (concatD [prt 4 rexpr1, doc (showString "-"), prt 5 rexpr2])
    AbsGrammatica.Mul rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 5 rexpr1, doc (showString "*"), prt 6 rexpr2])
    AbsGrammatica.Div rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 5 rexpr1, doc (showString "/"), prt 6 rexpr2])
    AbsGrammatica.Mod rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 5 rexpr1, doc (showString "%"), prt 6 rexpr2])
    AbsGrammatica.Pow rexpr1 rexpr2 -> prPrec i 6 (concatD [prt 7 rexpr1, doc (showString "^"), prt 6 rexpr2])
    AbsGrammatica.Neg rexpr -> prPrec i 7 (concatD [doc (showString "-"), prt 8 rexpr])
    AbsGrammatica.Ref lexpr -> prPrec i 7 (concatD [doc (showString "&"), prt 0 lexpr])
    AbsGrammatica.FCall funcall -> prPrec i 8 (concatD [prt 0 funcall])
    AbsGrammatica.Int n -> prPrec i 9 (concatD [prt 0 n])
    AbsGrammatica.Char c -> prPrec i 9 (concatD [prt 0 c])
    AbsGrammatica.String str -> prPrec i 9 (concatD [printString str])
    AbsGrammatica.Float d -> prPrec i 9 (concatD [prt 0 d])
    AbsGrammatica.Bool boolean -> prPrec i 9 (concatD [prt 0 boolean])
    AbsGrammatica.GoArrayLit n basictype rexprs -> prPrec i 9 (concatD [doc (showString "["), prt 0 n, doc (showString "]"), prt 0 basictype, doc (showString "{"), prt 0 rexprs, doc (showString "}")])
    AbsGrammatica.Lexpr lexpr -> prPrec i 12 (concatD [prt 0 lexpr])

instance Print AbsGrammatica.FunCall where
  prt i = \case
    AbsGrammatica.Call id_ rexprs -> prPrec i 0 (concatD [prt 0 id_, doc (showString "("), prt 0 rexprs, doc (showString ")")])

instance Print [AbsGrammatica.RExpr] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsGrammatica.LExpr where
  prt i = \case
    AbsGrammatica.Deref rexpr -> prPrec i 0 (concatD [doc (showString "*"), prt 9 rexpr])
    AbsGrammatica.PreInc lexpr -> prPrec i 1 (concatD [doc (showString "++"), prt 2 lexpr])
    AbsGrammatica.PreDecr lexpr -> prPrec i 1 (concatD [doc (showString "--"), prt 2 lexpr])
    AbsGrammatica.PostInc lexpr -> prPrec i 2 (concatD [prt 3 lexpr, doc (showString "++")])
    AbsGrammatica.PostDecr lexpr -> prPrec i 2 (concatD [prt 3 lexpr, doc (showString "--")])
    AbsGrammatica.BasLExpr blexpr -> prPrec i 2 (concatD [prt 0 blexpr])

instance Print AbsGrammatica.BLExpr where
  prt i = \case
    AbsGrammatica.ArrayEl id_ rexpr -> prPrec i 0 (concatD [prt 0 id_, doc (showString "["), prt 0 rexpr, doc (showString "]")])
    AbsGrammatica.Id id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print AbsGrammatica.Program where
  prt i = \case
    AbsGrammatica.Prog decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print [AbsGrammatica.Decl] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsGrammatica.Decl where
  prt i = \case
    AbsGrammatica.Dfun id_ parameters compstmt -> prPrec i 0 (concatD [doc (showString "func"), prt 0 id_, doc (showString "("), prt 0 parameters, doc (showString ")"), prt 0 compstmt])
    AbsGrammatica.DvarGo varspec -> prPrec i 0 (concatD [doc (showString "var"), prt 0 varspec, doc (showString ";")])

instance Print [AbsGrammatica.Parameter] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsGrammatica.Parameter where
  prt i = \case
    AbsGrammatica.Param id_ typespec -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id_, prt 0 typespec])

instance Print AbsGrammatica.VarSpec where
  prt i = \case
    AbsGrammatica.VarSpecSingleInit id_ typespec rexpr -> prPrec i 0 (concatD [prt 0 id_, prt 0 typespec, doc (showString "="), prt 0 rexpr])
    AbsGrammatica.VarSpecArrayInit id_ rexpr -> prPrec i 0 (concatD [prt 0 id_, doc (showString "="), prt 0 rexpr])
    AbsGrammatica.VarSpecSingleNoInit id_ typespec -> prPrec i 0 (concatD [prt 0 id_, prt 0 typespec])

instance Print AbsGrammatica.TypeSpec where
  prt i = \case
    AbsGrammatica.BasTyp basictype -> prPrec i 0 (concatD [prt 0 basictype])
    AbsGrammatica.CompType compoundtype -> prPrec i 0 (concatD [prt 0 compoundtype])

instance Print AbsGrammatica.BasicType where
  prt i = \case
    AbsGrammatica.BasicType_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    AbsGrammatica.BasicType_char -> prPrec i 0 (concatD [doc (showString "char")])
    AbsGrammatica.BasicType_float -> prPrec i 0 (concatD [doc (showString "float")])
    AbsGrammatica.BasicType_int -> prPrec i 0 (concatD [doc (showString "int")])
    AbsGrammatica.BasicType_string -> prPrec i 0 (concatD [doc (showString "string")])

instance Print AbsGrammatica.CompoundType where
  prt i = \case
    AbsGrammatica.ArrDef n typespec -> prPrec i 0 (concatD [doc (showString "["), prt 0 n, doc (showString "]"), prt 0 typespec])
    AbsGrammatica.ArrUnDef typespec -> prPrec i 0 (concatD [doc (showString "["), doc (showString "]"), prt 0 typespec])
    AbsGrammatica.Pointer typespec -> prPrec i 0 (concatD [doc (showString "*"), prt 0 typespec])

instance Print AbsGrammatica.CompStmt where
  prt i = \case
    AbsGrammatica.BlockDecl blockitems -> prPrec i 0 (concatD [doc (showString "{"), prt 0 blockitems, doc (showString "}")])

instance Print [AbsGrammatica.BlockItem] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsGrammatica.BlockItem where
  prt i = \case
    AbsGrammatica.DeclItem decl -> prPrec i 0 (concatD [prt 0 decl])
    AbsGrammatica.StmtItem stmt -> prPrec i 0 (concatD [prt 0 stmt])

instance Print [AbsGrammatica.Stmt] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsGrammatica.Stmt where
  prt i = \case
    AbsGrammatica.Comp compstmt -> prPrec i 0 (concatD [prt 0 compstmt])
    AbsGrammatica.ProcCall funcall -> prPrec i 0 (concatD [prt 0 funcall, doc (showString ";")])
    AbsGrammatica.Jmp jumpstmt -> prPrec i 0 (concatD [prt 0 jumpstmt, doc (showString ";")])
    AbsGrammatica.Iter iterstmt -> prPrec i 0 (concatD [prt 0 iterstmt])
    AbsGrammatica.Sel selectionstmt -> prPrec i 0 (concatD [prt 0 selectionstmt])
    AbsGrammatica.Assgn lexpr assignmentop rexpr -> prPrec i 0 (concatD [prt 0 lexpr, prt 0 assignmentop, prt 0 rexpr, doc (showString ";")])
    AbsGrammatica.LExprStmt lexpr -> prPrec i 0 (concatD [prt 0 lexpr, doc (showString ";")])
    AbsGrammatica.DeclStmt varspec -> prPrec i 0 (concatD [doc (showString "var"), prt 0 varspec, doc (showString ";")])
    AbsGrammatica.StmtInc id_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString "++"), doc (showString ";")])
    AbsGrammatica.StmtDec id_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString "--"), doc (showString ";")])

instance Print AbsGrammatica.Assignment_op where
  prt i = \case
    AbsGrammatica.Assign -> prPrec i 0 (concatD [doc (showString "=")])
    AbsGrammatica.AssgnMul -> prPrec i 0 (concatD [doc (showString "*=")])
    AbsGrammatica.AssgnAdd -> prPrec i 0 (concatD [doc (showString "+=")])
    AbsGrammatica.AssgnDiv -> prPrec i 0 (concatD [doc (showString "/=")])
    AbsGrammatica.AssgnSub -> prPrec i 0 (concatD [doc (showString "-=")])
    AbsGrammatica.AssgnPow -> prPrec i 0 (concatD [doc (showString "^=")])
    AbsGrammatica.AssgnAnd -> prPrec i 0 (concatD [doc (showString "&=")])
    AbsGrammatica.AssgnOr -> prPrec i 0 (concatD [doc (showString "|=")])

instance Print AbsGrammatica.JumpStmt where
  prt i = \case
    AbsGrammatica.Break -> prPrec i 0 (concatD [doc (showString "break")])
    AbsGrammatica.Continue -> prPrec i 0 (concatD [doc (showString "continue")])

instance Print AbsGrammatica.SelectionStmt where
  prt i = \case
    AbsGrammatica.IfNoElse rexpr stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 stmt])
    AbsGrammatica.IfElse rexpr stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])

instance Print AbsGrammatica.IterStmt where
  prt i = \case
    AbsGrammatica.While rexpr stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 stmt])
    AbsGrammatica.DoWhile stmt rexpr -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stmt, doc (showString "while"), doc (showString "("), prt 0 rexpr, doc (showString ")"), doc (showString ";")])
