-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammatica where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammatica

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammatica.Ident -> Result
transIdent x = case x of
  AbsGrammatica.Ident string -> failure x

transBoolean :: AbsGrammatica.Boolean -> Result
transBoolean x = case x of
  AbsGrammatica.Boolean_true -> failure x
  AbsGrammatica.Boolean_false -> failure x

transRExpr :: AbsGrammatica.RExpr -> Result
transRExpr x = case x of
  AbsGrammatica.Or rexpr1 rexpr2 -> failure x
  AbsGrammatica.And rexpr1 rexpr2 -> failure x
  AbsGrammatica.Not rexpr -> failure x
  AbsGrammatica.Eq rexpr1 rexpr2 -> failure x
  AbsGrammatica.Neq rexpr1 rexpr2 -> failure x
  AbsGrammatica.Lt rexpr1 rexpr2 -> failure x
  AbsGrammatica.LtE rexpr1 rexpr2 -> failure x
  AbsGrammatica.Gt rexpr1 rexpr2 -> failure x
  AbsGrammatica.GtE rexpr1 rexpr2 -> failure x
  AbsGrammatica.Add rexpr1 rexpr2 -> failure x
  AbsGrammatica.Sub rexpr1 rexpr2 -> failure x
  AbsGrammatica.Mul rexpr1 rexpr2 -> failure x
  AbsGrammatica.Div rexpr1 rexpr2 -> failure x
  AbsGrammatica.Mod rexpr1 rexpr2 -> failure x
  AbsGrammatica.Pow rexpr1 rexpr2 -> failure x
  AbsGrammatica.Neg rexpr -> failure x
  AbsGrammatica.Ref lexpr -> failure x
  AbsGrammatica.FCall funcall -> failure x
  AbsGrammatica.Int integer -> failure x
  AbsGrammatica.Char char -> failure x
  AbsGrammatica.String string -> failure x
  AbsGrammatica.Float double -> failure x
  AbsGrammatica.Bool boolean -> failure x
  AbsGrammatica.GoArrayLit integer basictype rexprs -> failure x
  AbsGrammatica.Lexpr lexpr -> failure x

transFunCall :: AbsGrammatica.FunCall -> Result
transFunCall x = case x of
  AbsGrammatica.Call ident rexprs -> failure x

transLExpr :: AbsGrammatica.LExpr -> Result
transLExpr x = case x of
  AbsGrammatica.Deref rexpr -> failure x
  AbsGrammatica.PreInc lexpr -> failure x
  AbsGrammatica.PreDecr lexpr -> failure x
  AbsGrammatica.PostInc lexpr -> failure x
  AbsGrammatica.PostDecr lexpr -> failure x
  AbsGrammatica.BasLExpr blexpr -> failure x

transBLExpr :: AbsGrammatica.BLExpr -> Result
transBLExpr x = case x of
  AbsGrammatica.ArrayEl ident rexpr -> failure x
  AbsGrammatica.Id ident -> failure x

transProgram :: AbsGrammatica.Program -> Result
transProgram x = case x of
  AbsGrammatica.Prog decls -> failure x

transDecl :: AbsGrammatica.Decl -> Result
transDecl x = case x of
  AbsGrammatica.Dfun ident parameters compstmt -> failure x
  AbsGrammatica.DvarGo varspec -> failure x

transParameter :: AbsGrammatica.Parameter -> Result
transParameter x = case x of
  AbsGrammatica.Param ident typespec -> failure x

transVarSpec :: AbsGrammatica.VarSpec -> Result
transVarSpec x = case x of
  AbsGrammatica.VarSpecSingleInit ident typespec rexpr -> failure x
  AbsGrammatica.VarSpecArrayInit ident rexpr -> failure x
  AbsGrammatica.VarSpecSingleNoInit ident typespec -> failure x

transTypeSpec :: AbsGrammatica.TypeSpec -> Result
transTypeSpec x = case x of
  AbsGrammatica.BasTyp basictype -> failure x
  AbsGrammatica.CompType compoundtype -> failure x

transBasicType :: AbsGrammatica.BasicType -> Result
transBasicType x = case x of
  AbsGrammatica.BasicType_bool -> failure x
  AbsGrammatica.BasicType_char -> failure x
  AbsGrammatica.BasicType_float -> failure x
  AbsGrammatica.BasicType_int -> failure x
  AbsGrammatica.BasicType_string -> failure x

transCompoundType :: AbsGrammatica.CompoundType -> Result
transCompoundType x = case x of
  AbsGrammatica.ArrDef integer typespec -> failure x
  AbsGrammatica.ArrUnDef typespec -> failure x
  AbsGrammatica.Pointer typespec -> failure x

transCompStmt :: AbsGrammatica.CompStmt -> Result
transCompStmt x = case x of
  AbsGrammatica.BlockDecl blockitems -> failure x

transBlockItem :: AbsGrammatica.BlockItem -> Result
transBlockItem x = case x of
  AbsGrammatica.DeclItem decl -> failure x
  AbsGrammatica.StmtItem stmt -> failure x

transStmt :: AbsGrammatica.Stmt -> Result
transStmt x = case x of
  AbsGrammatica.Comp compstmt -> failure x
  AbsGrammatica.ProcCall funcall -> failure x
  AbsGrammatica.Jmp jumpstmt -> failure x
  AbsGrammatica.Iter iterstmt -> failure x
  AbsGrammatica.Sel selectionstmt -> failure x
  AbsGrammatica.Assgn lexpr assignmentop rexpr -> failure x
  AbsGrammatica.LExprStmt lexpr -> failure x
  AbsGrammatica.DeclStmt varspec -> failure x
  AbsGrammatica.StmtInc ident -> failure x
  AbsGrammatica.StmtDec ident -> failure x

transAssignment_op :: AbsGrammatica.Assignment_op -> Result
transAssignment_op x = case x of
  AbsGrammatica.Assign -> failure x
  AbsGrammatica.AssgnMul -> failure x
  AbsGrammatica.AssgnAdd -> failure x
  AbsGrammatica.AssgnDiv -> failure x
  AbsGrammatica.AssgnSub -> failure x
  AbsGrammatica.AssgnPow -> failure x
  AbsGrammatica.AssgnAnd -> failure x
  AbsGrammatica.AssgnOr -> failure x

transJumpStmt :: AbsGrammatica.JumpStmt -> Result
transJumpStmt x = case x of
  AbsGrammatica.Break -> failure x
  AbsGrammatica.Continue -> failure x

transSelectionStmt :: AbsGrammatica.SelectionStmt -> Result
transSelectionStmt x = case x of
  AbsGrammatica.IfNoElse rexpr stmt -> failure x
  AbsGrammatica.IfElse rexpr stmt1 stmt2 -> failure x

transIterStmt :: AbsGrammatica.IterStmt -> Result
transIterStmt x = case x of
  AbsGrammatica.While rexpr stmt -> failure x
  AbsGrammatica.DoWhile stmt rexpr -> failure x
